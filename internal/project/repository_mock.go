//
// Generated by this command:
//
//	mockgen --source=repository.go -destination=repository_mock.go -package=project
//

// Package project is a generated GoMock package.
package project

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteVersionByIDTransaction mocks base method.
func (m *MockRepository) DeleteVersionByIDTransaction(ctx context.Context, versionID uint) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersionByIDTransaction", ctx, versionID)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVersionByIDTransaction indicates an expected call of DeleteVersionByIDTransaction.
func (mr *MockRepositoryMockRecorder) DeleteVersionByIDTransaction(ctx, versionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersionByIDTransaction", reflect.TypeOf((*MockRepository)(nil).DeleteVersionByIDTransaction), ctx, versionID)
}

// GetAllProjects mocks base method.
func (m *MockRepository) GetAllProjects(ctx context.Context) ([]Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProjects", ctx)
	ret0, _ := ret[0].([]Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProjects indicates an expected call of GetAllProjects.
func (mr *MockRepositoryMockRecorder) GetAllProjects(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProjects", reflect.TypeOf((*MockRepository)(nil).GetAllProjects), ctx)
}

// GetProjectByID mocks base method.
func (m *MockRepository) GetProjectByID(ctx context.Context, id int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectByID", ctx, id)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectByID indicates an expected call of GetProjectByID.
func (mr *MockRepositoryMockRecorder) GetProjectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectByID", reflect.TypeOf((*MockRepository)(nil).GetProjectByID), ctx, id)
}

// GetProjectVersions mocks base method.
func (m *MockRepository) GetProjectVersions(ctx context.Context, projectID int) ([]Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectVersions", ctx, projectID)
	ret0, _ := ret[0].([]Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectVersions indicates an expected call of GetProjectVersions.
func (mr *MockRepositoryMockRecorder) GetProjectVersions(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectVersions", reflect.TypeOf((*MockRepository)(nil).GetProjectVersions), ctx, projectID)
}

// GetVersionByIDAndProjectID mocks base method.
func (m *MockRepository) GetVersionByIDAndProjectID(ctx context.Context, versionID, projectID uint) (*Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionByIDAndProjectID", ctx, versionID, projectID)
	ret0, _ := ret[0].(*Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionByIDAndProjectID indicates an expected call of GetVersionByIDAndProjectID.
func (mr *MockRepositoryMockRecorder) GetVersionByIDAndProjectID(ctx, versionID, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionByIDAndProjectID", reflect.TypeOf((*MockRepository)(nil).GetVersionByIDAndProjectID), ctx, versionID, projectID)
}
