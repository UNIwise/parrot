// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetTTL mocks base method.
func (m *MockCache) GetTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTTL indicates an expected call of GetTTL.
func (mr *MockCacheMockRecorder) GetTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTL", reflect.TypeOf((*MockCache)(nil).GetTTL))
}

// GetTranslation mocks base method.
func (m *MockCache) GetTranslation(ctx context.Context, projectID int, languageCode, format, version string) (*CacheItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTranslation", ctx, projectID, languageCode, format, version)
	ret0, _ := ret[0].(*CacheItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTranslation indicates an expected call of GetTranslation.
func (mr *MockCacheMockRecorder) GetTranslation(ctx, projectID, languageCode, format, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTranslation", reflect.TypeOf((*MockCache)(nil).GetTranslation), ctx, projectID, languageCode, format, version)
}

// PingContext mocks base method.
func (m *MockCache) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockCacheMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockCache)(nil).PingContext), ctx)
}

// PurgeProject mocks base method.
func (m *MockCache) PurgeProject(ctx context.Context, projectID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeProject", ctx, projectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeProject indicates an expected call of PurgeProject.
func (mr *MockCacheMockRecorder) PurgeProject(ctx, projectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeProject", reflect.TypeOf((*MockCache)(nil).PurgeProject), ctx, projectID)
}

// PurgeTranslation mocks base method.
func (m *MockCache) PurgeTranslation(ctx context.Context, projectID int, languageCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeTranslation", ctx, projectID, languageCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeTranslation indicates an expected call of PurgeTranslation.
func (mr *MockCacheMockRecorder) PurgeTranslation(ctx, projectID, languageCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeTranslation", reflect.TypeOf((*MockCache)(nil).PurgeTranslation), ctx, projectID, languageCode)
}

// SetTranslation mocks base method.
func (m *MockCache) SetTranslation(ctx context.Context, projectID int, languageCode, format, version string, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTranslation", ctx, projectID, languageCode, format, version, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTranslation indicates an expected call of SetTranslation.
func (mr *MockCacheMockRecorder) SetTranslation(ctx, projectID, languageCode, format, version, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTranslation", reflect.TypeOf((*MockCache)(nil).SetTranslation), ctx, projectID, languageCode, format, version, data)
}
